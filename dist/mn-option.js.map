{"version":3,"sources":["scripts/mn-option.class.js"],"names":["MnOption","self","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","isValidValue","values","indexOf","value","default","input","setAttribute","_this","_ret","_classCallCheck","this","hasAttribute","console","error","inputAttributes","label","document","createElement","map","removeAttribute","appendChild","addEventListener","blur","type","isNatural","classList","contains","customInput","className","add","vector","createElementNS","innerHTML","background","checked","lastChecked","querySelector","remove","_possibleConstructorReturn","form","closest","options","querySelectorAll","Array","from","item","filter","length","HTMLElement","window","customElements","define"],"mappings":"sxCAAMA,SAAAA,SAAAA,cACJ,QAAAA,UAAYC,MA+GV,QAASC,mBAAkBC,WACzB,GAAMC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,QAAQC,aAAaL,UAAUM,KAEtD,IAAIL,mBAAoB,CACtB,GAAMM,cAAeP,UAAUE,eAAe,WACzCF,UAAUQ,OAAOC,QAAQN,iBAAmB,EAE3CO,MAAQH,aACVJ,eACAH,UAAUW,OAEdC,OAAMC,aAAab,UAAUM,KAAMI,WAC1BP,iBACTS,MAAMC,aAAab,UAAUM,KAAMH,gBA7HvB,GAAAW,OAAAC,IAAAC,iBAAAC,KAAApB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMM,SAAAA,KAMN,IAJKU,MAAKI,aAAa,SACrBC,QAAQC,MAAM,8BAGXN,MAAKI,aAAa,SAAU,CAC/B,GAAMZ,MAAOQ,MAAKI,aAAa,QAAlB,UACCJ,MAAKT,aAAa,QADnB,KAET,EAEJc,SAAQC,MAAR,6BAA2Cd,MAG7C,GAAMe,mBAEFf,KAAM,OACNE,QAAS,QAAS,YAClBG,QAAS,aAGTL,KAAM,SAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,UAGNA,KAAM,OAIJgB,MAAQC,SAASC,cAAc,SAG/BZ,MAAQW,SAASC,cAAc,QACrCH,iBAAgBI,IAAI1B,mBACpBe,MAAKY,gBAAgB,MACrBJ,MAAMK,YAAYf,OAElBE,MAAKc,iBAAiB,aAAc,WAClChB,MAAMiB,QAGR,IAAMC,MAAOhB,MAAKT,aAAa,QACzB0B,UAAYjB,MAAKkB,UAAUC,SAAS,UAC1C,IAAIH,OAASC,UAAW,CACtB,GAAMG,aAAcX,SAASC,cAAc,MAK3C,IAJAU,YAAYC,UAAY,QACxBD,YAAYF,UAAUI,IAAIN,MAC1BR,MAAMK,YAAYO,aAEL,aAATJ,KAAqB,CACvB,GAAMO,QAASd,SAASe,gBAAgB,6BAA8B,MACtED,QAAOxB,aAAa,QAAS,QAC7BwB,OAAOxB,aAAa,SAAU,QAC9BwB,OAAOE,UAAP,2dAeAL,YAAYP,YAAYU,aAErB,CACL,GAAMG,YAAajB,SAASC,cAAc,MAC1CgB,YAAWR,UAAUI,IAAI,cACzBd,MAAMK,YAAYa,YAuBpB,MApBI5B,OAAM6B,SACR3B,MAAKkB,UAAUI,IAAI,WAGrBxB,MAAMgB,iBAAiB,SAAU,WAC/B,GAAmC,UAA/BhB,MAAMP,aAAa,QAAqB,CAC1C,GAAMC,OAAOM,MAAMP,aAAa,QAC1BqC,YAAcnB,SAASoB,cAAT,2BAAkDrC,MAAlD,KAChBoC,cACFA,YAAYV,UAAUY,OAAO,WAIjChC,MAAM6B,QACF3B,MAAKkB,UAAUI,IAAI,WACnBtB,MAAKkB,UAAUY,OAAO,aAG5BxC,QAAQuB,YAAYL,OAEpBP,KAAOjB,KAAP+C,2BAAA/B,MAAAC,iGAsBA,GAAM+B,MAAO7B,KAAK8B,QAAQ,QACpBzC,KAAOW,KAAKZ,aAAa,QACzB2C,QAAUF,KAAKG,iBAAL,mBAAyC3C,KAAzC,MACVwB,KAAOb,KAAKZ,aAAa,QAEzBK,MAAQwC,MACXC,KAAKH,SACLvB,IAAI,SAAA2B,MAAA,MAAQA,MAAKT,cAAc,WAC/BU,OAAO,SAAAD,MAAA,MAAQA,MAAKX,UACpBhB,IAAI,SAAA2B,MAAA,MAAQA,MAAK1C,OAEpB,OAAgB,UAAToB,MAAoBkB,QAAQM,QAAU,EACzC5C,MAAM,GACNA,oBAjJe6C,YAqJvBC,QAAOC,eAAeC,OAAO,YAAa7D,UAC1C2D,OAAO3D,SAAWA","file":"mn-option.js","sourcesContent":["class MnOption extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    const element = this\n\n    if (!this.hasAttribute('name')) {\n      console.error('missing name in mn-option')\n    }\n\n    if (!this.hasAttribute('value')) {\n      const name = this.hasAttribute('name')\n        ? `[name=\"${this.getAttribute('name')}\"]`\n        : ''\n\n      console.error(`missing value in mn-option${name}`)\n    }\n\n    const inputAttributes = [\n      {\n        name: 'type',\n        values: ['radio', 'checkbox'],\n        default: 'checkbox',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'checked',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'id',\n      },\n    ]\n\n    const label = document.createElement('label')\n\n    // input element\n    const input = document.createElement('input')\n    inputAttributes.map(setInputAttribute)\n    this.removeAttribute('id')\n    label.appendChild(input)\n\n    this.addEventListener('mouseleave', () => {\n      input.blur()\n    })\n\n    const type = this.getAttribute('type')\n    const isNatural = this.classList.contains('natural')\n    if (type && !isNatural) {\n      const customInput = document.createElement('div')\n      customInput.className = 'input'\n      customInput.classList.add(type)\n      label.appendChild(customInput)\n\n      if (type === 'checkbox') {\n        const vector = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        vector.setAttribute('width', '16px')\n        vector.setAttribute('height', '16px')\n        vector.innerHTML = `<g\n          stroke=\"none\"\n          stroke-width=\"1\"\n          fill=\"none\"\n          fill-rule=\"evenodd\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\">\n            <g\n              transform=\"translate(2.000000, 3.000000)\"\n              stroke-width=\"2\"\n              stroke=\"#000000\">\n                <polyline\n                  points=\"12.3825 0.581533333 3.653 10.3935333 0.273722222 6.7386\"></polyline>\n            </g>\n        </g>`\n        customInput.appendChild(vector)\n      }\n    } else {\n      const background = document.createElement('div')\n      background.classList.add('background')\n      label.appendChild(background)\n    }\n\n    if (input.checked) {\n      this.classList.add('checked')\n    }\n\n    input.addEventListener('change', () => {\n      if (input.getAttribute('type') === 'radio') {\n        const name = input.getAttribute('name')\n        const lastChecked = document.querySelector(`mn-option.checked[name=\"${name}\"]`)\n        if (lastChecked) {\n          lastChecked.classList.remove('checked')\n        }\n      }\n\n      input.checked\n        ? this.classList.add('checked')\n        : this.classList.remove('checked')\n    })\n\n    element.appendChild(label)\n\n    return self\n\n    function setInputAttribute(attribute) {\n      const isDefaultAttribute = attribute.hasOwnProperty('default')\n      const attributeValue = element.getAttribute(attribute.name)\n\n      if (isDefaultAttribute) {\n        const isValidValue = attribute.hasOwnProperty('values')\n          && attribute.values.indexOf(attributeValue) >= 0\n\n        const value = isValidValue\n          ? attributeValue\n          : attribute.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n\n  get value() {\n    const form = this.closest('form')\n    const name = this.getAttribute('name')\n    const options = form.querySelectorAll(`mn-option[name=\"${name}\"]`)\n    const type = this.getAttribute('type')\n\n    const value = Array\n      .from(options)\n      .map(item => item.querySelector('input'))\n      .filter(item => item.checked)\n      .map(item => item.value)\n\n    return type === 'radio' || options.length <= 1\n      ? value[0]\n      : value\n  }\n}\n\nwindow.customElements.define('mn-option', MnOption)\nwindow.MnOption = MnOption\n"]}