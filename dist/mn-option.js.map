{"version":3,"sources":["scripts/mn-option.class.js"],"names":["parsed","value","isVariable","startsWith","isNaN","eval","e","MnOption","self","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","isValidValue","values","indexOf","default","input","setAttribute","_this","_ret","_classCallCheck","this","hasAttribute","console","error","inputAttributes","label","document","createElement","map","removeAttribute","appendChild","addEventListener","blur","type","isNatural","classList","contains","customInput","className","add","vector","createElementNS","innerHTML","background","placeholderText","textContent","checked","lastChecked","querySelector","remove","_possibleConstructorReturn","form","closest","options","querySelectorAll","Array","from","item","filter","length","isArray","forEach","option","HTMLElement","window","customElements","define"],"mappings":"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","file":"mn-option.js","sourcesContent":["class MnOption extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    const element = this\n\n    if (!this.hasAttribute('value')) {\n      const name = this.hasAttribute('name')\n        ? `[name=\"${this.getAttribute('name')}\"]`\n        : ''\n\n      console.error(`missing value in mn-option${name}`)\n    }\n\n    const inputAttributes = [\n      {\n        name: 'type',\n        values: ['radio', 'checkbox'],\n        default: 'checkbox',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'checked',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'id',\n      },\n    ]\n\n    const label = document.createElement('label')\n\n    // input element\n    const input = document.createElement('input')\n    inputAttributes.map(setInputAttribute)\n    this.removeAttribute('id')\n    label.appendChild(input)\n\n    this.addEventListener('mouseleave', () => {\n      input.blur()\n    })\n\n    // custom input\n    const type = this.getAttribute('type')\n    const isNatural = this.classList.contains('natural')\n    if (type && !isNatural) {\n      const customInput = document.createElement('div')\n      customInput.className = 'input'\n      customInput.classList.add(type)\n      label.appendChild(customInput)\n\n      if (type === 'checkbox') {\n        const vector = document.createElementNS('http://www.w3.org/2000/svg', 'svg')\n        vector.setAttribute('width', '16px')\n        vector.setAttribute('height', '16px')\n        vector.innerHTML = `<g\n          stroke=\"none\"\n          stroke-width=\"1\"\n          fill=\"none\"\n          fill-rule=\"evenodd\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\">\n            <g\n              transform=\"translate(2.000000, 3.000000)\"\n              stroke-width=\"2\"\n              stroke=\"#000000\">\n                <polyline\n                  points=\"12.3825 0.581533333 3.653 10.3935333 0.273722222 6.7386\"></polyline>\n            </g>\n        </g>`\n        customInput.appendChild(vector)\n      }\n    } else {\n      const background = document.createElement('div')\n      background.classList.add('background')\n      label.appendChild(background)\n    }\n\n    // placeholder text\n    const placeholderText = document.createElement('span')\n    placeholderText.classList.add('text')\n    placeholderText.textContent = this.getAttribute('placeholder') || this.getAttribute('value')\n    label.appendChild(placeholderText)\n\n    if (input.checked) {\n      this.classList.add('checked')\n    }\n\n    input.addEventListener('change', () => {\n      if (input.getAttribute('type') === 'radio') {\n        const name = input.getAttribute('name')\n        const lastChecked = document.querySelector(`mn-option.checked[name=\"${name}\"]`)\n        if (lastChecked) {\n          lastChecked.classList.remove('checked')\n        }\n      }\n\n      input.checked\n        ? this.classList.add('checked')\n        : this.classList.remove('checked')\n\n      // element.value = input.value\n      // console.log('change')\n    })\n\n    element.appendChild(label)\n\n    return self\n\n    function setInputAttribute(attribute) {\n      const isDefaultAttribute = attribute.hasOwnProperty('default')\n      const attributeValue = element.getAttribute(attribute.name)\n\n      if (isDefaultAttribute) {\n        const isValidValue = attribute.hasOwnProperty('values')\n          && attribute.values.indexOf(attributeValue) >= 0\n\n        const value = isValidValue\n          ? attributeValue\n          : attribute.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n\n  get value() {\n    const form = this.closest('form') || document\n    const name = this.getAttribute('name')\n      ? `[name=\"${this.getAttribute('name')}\"]`\n      : ':not([name])'\n    const options = form.querySelectorAll(`mn-option${name}`)\n    const type = this.getAttribute('type')\n\n    const value = Array\n      .from(options)\n      .map(item => item.querySelector('input'))\n      .filter(item => item.checked)\n      .map(item => parsed(item.value))\n\n    return type === 'radio' || options.length <= 1\n      ? value[0]\n      : value\n  }\n\n  set value(value) {\n    const form = this.closest('form') || document\n    const name = this.getAttribute('name')\n      ? `[name=\"${this.getAttribute('name')}\"]`\n      : ':not([name])'\n    const options = form.querySelectorAll(`mn-option${name}`)\n    const type = options[0].getAttribute('type')\n    const values = Array.isArray(value)\n      ? value\n      : [value]\n\n    Array\n      .from(options)\n      .forEach(option => {\n        option.checked = false\n      })\n\n    if (type === 'radio') {\n      const value = values[0]\n      const option = form.querySelector(`mn-option${name}[value=\"${value}\"]`)\n      if (option) {\n        option.checked = true\n      } else if (value) {\n        console.error(`${value} is a invalid value to mn-option${name}`)\n      }\n    } else {\n      values\n        .forEach(value => {\n          const option = form.querySelector(`mn-option${name}[value=\"${value}\"]`)\n          if (option) {\n            option.checked = true\n          } else if (value) {\n            console.error(`${value} is a invalid value to mn-option${name}`)\n          }\n        })\n    }\n  }\n\n  get checked() {\n    return this.hasAttribute('checked')\n  }\n\n  set checked(checked) {\n    if (checked) {\n      this.setAttribute('checked', 'true')\n      this.classList.add('checked')\n    } else {\n      this.removeAttribute('checked')\n      this.classList.remove('checked')\n    }\n\n    this.querySelector('input').checked = checked\n  }\n}\n\nfunction parsed(value) {\n  try {\n    const isVariable = !value.startsWith('[')\n      && !value.startsWith('{')\n      && !value.startsWith('\\'')\n      && !value.startsWith('\"')\n      && !value.startsWith('`')\n      && value !== 'true'\n      && value !== 'false'\n      && isNaN(value)\n\n    return isVariable\n        ? eval(`'${value}'`) // convert to string\n        : eval(`(${value})`) // evaluate\n  } catch (e) {\n    return value\n  }\n}\n\nwindow.customElements.define('mn-option', MnOption)\nwindow.MnOption = MnOption\n"]}