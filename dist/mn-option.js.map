{"version":3,"sources":["scripts/mn-option.class.js"],"names":["MnOption","self","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","isValidValue","values","indexOf","value","default","input","setAttribute","_this","_ret","_classCallCheck","this","inputAttributes","label","document","createElement","map","removeAttribute","appendChild","addEventListener","blur","type","isNatural","classList","contains","customInput","className","add","background","checked","lastChecked","querySelector","remove","_possibleConstructorReturn","HTMLElement","window","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,cACJ,QAAAA,UAAYC,MA6EV,QAASC,mBAAkBC,WACzB,GAAMC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,QAAQC,aAAaL,UAAUM,KAEtD,IAAIL,mBAAoB,CACtB,GAAMM,cAAeP,UAAUE,eAAe,WACzCF,UAAUQ,OAAOC,QAAQN,iBAAmB,EAE3CO,MAAQH,aACVJ,eACAH,UAAUW,OAEdC,OAAMC,aAAab,UAAUM,KAAMI,WAC1BP,iBACTS,MAAMC,aAAab,UAAUM,KAAMH,gBA3FvB,GAAAW,OAAAC,IAAAC,iBAAAC,KAAApB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMM,SAAAA,MAEAc,kBAEFZ,KAAM,OACNE,QAAS,QAAS,YAClBG,QAAS,aAGTL,KAAM,SAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,UAGNA,KAAM,OAIJa,MAAQC,SAASC,cAAc,SAG/BT,MAAQQ,SAASC,cAAc,QACrCH,iBAAgBI,IAAIvB,mBACpBe,MAAKS,gBAAgB,MACrBJ,MAAMK,YAAYZ,OAElBE,MAAKW,iBAAiB,aAAc,WAClCb,MAAMc,QAGR,IAAMC,MAAOb,MAAKT,aAAa,QACzBuB,UAAYd,MAAKe,UAAUC,SAAS,UAC1C,IAAIH,OAASC,UAAW,CACtB,GAAMG,aAAcX,SAASC,cAAc,MAC3CU,aAAYC,UAAY,QACxBD,YAAYF,UAAUI,IAAIN,MAC1BR,MAAMK,YAAYO,iBACb,CACL,GAAMG,YAAad,SAASC,cAAc,MAC1Ca,YAAWL,UAAUI,IAAI,cACzBd,MAAMK,YAAYU,YAuBpB,MApBItB,OAAMuB,SACRrB,MAAKe,UAAUI,IAAI,WAGrBrB,MAAMa,iBAAiB,SAAU,WAC/B,GAAmC,UAA/Bb,MAAMP,aAAa,QAAqB,CAC1C,GAAMC,MAAOM,MAAMP,aAAa,QAC1B+B,YAAchB,SAASiB,cAAT,2BAAkD/B,KAAlD,KAChB8B,cACFA,YAAYP,UAAUS,OAAO,WAIjC1B,MAAMuB,QACFrB,MAAKe,UAAUI,IAAI,WACnBnB,MAAKe,UAAUS,OAAO,aAG5BlC,QAAQoB,YAAYL,OAEpBJ,KAAOjB,KAAPyC,2BAAAzB,MAAAC,wDA5EmByB,YAkGvBC,QAAOC,eAAeC,OAAO,YAAa9C,UAC1C4C,OAAO5C,SAAWA","file":"mn-option.js","sourcesContent":["class MnOption extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    const element = this\n\n    const inputAttributes = [\n      {\n        name: 'type',\n        values: ['radio', 'checkbox'],\n        default: 'checkbox',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'checked',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'id',\n      },\n    ]\n\n    const label = document.createElement('label')\n\n    // input element\n    const input = document.createElement('input')\n    inputAttributes.map(setInputAttribute)\n    this.removeAttribute('id')\n    label.appendChild(input)\n\n    this.addEventListener('mouseleave', () => {\n      input.blur()\n    })\n\n    const type = this.getAttribute('type')\n    const isNatural = this.classList.contains('natural')\n    if (type && !isNatural) {\n      const customInput = document.createElement('div')\n      customInput.className = 'input'\n      customInput.classList.add(type)\n      label.appendChild(customInput)\n    } else {\n      const background = document.createElement('div')\n      background.classList.add('background')\n      label.appendChild(background)\n    }\n\n    if (input.checked) {\n      this.classList.add('checked')\n    }\n\n    input.addEventListener('change', () => {\n      if (input.getAttribute('type') === 'radio') {\n        const name = input.getAttribute('name')\n        const lastChecked = document.querySelector(`mn-option.checked[name=\"${name}\"]`)\n        if (lastChecked) {\n          lastChecked.classList.remove('checked')\n        }\n      }\n\n      input.checked\n        ? this.classList.add('checked')\n        : this.classList.remove('checked')\n    })\n\n    element.appendChild(label)\n\n    return self\n\n    function setInputAttribute(attribute) {\n      const isDefaultAttribute = attribute.hasOwnProperty('default')\n      const attributeValue = element.getAttribute(attribute.name)\n\n      if (isDefaultAttribute) {\n        const isValidValue = attribute.hasOwnProperty('values')\n          && attribute.values.indexOf(attributeValue) >= 0\n\n        const value = isValidValue\n          ? attributeValue\n          : attribute.default\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n}\n\nwindow.customElements.define('mn-option', MnOption)\nwindow.MnOption = MnOption\n"]}