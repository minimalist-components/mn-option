{"version":3,"sources":["scripts/mn-option.class.js"],"names":["MnOption","self","setInputAttribute","attribute","isDefaultAttribute","hasOwnProperty","attributeValue","element","getAttribute","name","console","log","isValidValue","values","indexOf","value","default","input","setAttribute","_this","_ret","_classCallCheck","this","inputAttributes","label","document","createElement","map","removeAttribute","appendChild","addEventListener","blur","type","customInput","className","classList","add","background","textContent","_possibleConstructorReturn","HTMLElement","window","customElements","define"],"mappings":"yyBAAMA,UAAAA,SAAAA,cACJ,QAAAA,UAAYC,MA2DV,QAASC,mBAAkBC,WACzB,GAAMC,oBAAqBD,UAAUE,eAAe,WAC9CC,eAAiBC,QAAQC,aAAaL,UAAUM,KAItD,IAFAC,QAAQC,IAAIR,UAAUM,KAAML,oBAExBA,mBAAoB,CACtB,GAAMQ,cAAeT,UAAUE,eAAe,WACzCF,UAAUU,OAAOC,QAAQR,iBAAmB,EAE3CS,MAAQH,aACVN,eACAH,UAAUa,OACdN,SAAQC,IAAII,OAEZE,MAAMC,aAAaf,UAAUM,KAAMM,WAC1BT,iBACTW,MAAMC,aAAaf,UAAUM,KAAMH,gBA5EvB,GAAAa,OAAAC,IAAAC,iBAAAC,KAAAtB,UAChBC,KAAAA,MAAAA,2BAAAA,MAAAA,SAAAA,WAAAA,OAAAA,eAAAA,WAAAA,KAAAA,KAAaA,MACb,IAAMM,SAAAA,MAEAgB,kBAEFd,KAAM,OACNI,QAAS,QAAS,YAClBG,QAAS,aAGTP,KAAM,SAGNA,KAAM,cAGNA,KAAM,YAGNA,KAAM,aAGNA,KAAM,UAGNA,KAAM,OAIJe,MAAQC,SAASC,cAAc,SAG/BT,MAAQQ,SAASC,cAAc,QACrCH,iBAAgBI,IAAIzB,mBACpBiB,MAAKS,gBAAgB,MACrBJ,MAAMK,YAAYZ,OAElBE,MAAKW,iBAAiB,aAAc,WAClCb,MAAMc,QAGR,IAAMC,MAAOb,MAAKX,aAAa,OAC/B,IAAIwB,KAAM,CACR,GAAMC,aAAcR,SAASC,cAAc,MAC3CO,aAAYC,UAAY,QACxBD,YAAYE,UAAUC,IAAIJ,MAC1BR,MAAMK,YAAYI,iBACb,CACL,GAAMI,YAAaZ,SAASC,cAAc,MAC1CW,YAAWF,UAAUC,IAAI,cACzBC,WAAWC,YAAcnB,MAAKX,aAAa,eAC3CgB,MAAMK,YAAYQ,YAKpB,MAFA9B,SAAQsB,YAAYL,OAEpBJ,KAAOnB,KAAPsC,2BAAApB,MAAAC,wDA1DmBoB,YAmFvBC,QAAOC,eAAeC,OAAO,YAAa3C,UAC1CyC,OAAOzC,SAAWA","file":"mn-radio.js","sourcesContent":["class MnOption extends HTMLElement {\n  constructor(self) {\n    self = super(self)\n    const element = this\n\n    const inputAttributes = [\n      {\n        name: 'type',\n        values: ['radio', 'checkbox'],\n        default: 'checkbox',\n      },\n      {\n        name: 'name',\n      },\n      {\n        name: 'autofocus',\n      },\n      {\n        name: 'checked',\n      },\n      {\n        name: 'disabled',\n      },\n      {\n        name: 'value',\n      },\n      {\n        name: 'id',\n      },\n    ]\n\n    const label = document.createElement('label')\n\n    // input element\n    const input = document.createElement('input')\n    inputAttributes.map(setInputAttribute)\n    this.removeAttribute('id')\n    label.appendChild(input)\n\n    this.addEventListener('mouseleave', () => {\n      input.blur()\n    })\n\n    const type = this.getAttribute('type')\n    if (type) {\n      const customInput = document.createElement('div')\n      customInput.className = 'input'\n      customInput.classList.add(type)\n      label.appendChild(customInput)\n    } else {\n      const background = document.createElement('div')\n      background.classList.add('background')\n      background.textContent = this.getAttribute('placeholder')\n      label.appendChild(background)\n    }\n\n    element.appendChild(label)\n\n    return self\n\n    function setInputAttribute(attribute) {\n      const isDefaultAttribute = attribute.hasOwnProperty('default')\n      const attributeValue = element.getAttribute(attribute.name)\n\n      console.log(attribute.name, isDefaultAttribute)\n\n      if (isDefaultAttribute) {\n        const isValidValue = attribute.hasOwnProperty('values')\n          && attribute.values.indexOf(attributeValue) >= 0\n\n        const value = isValidValue\n          ? attributeValue\n          : attribute.default\n        console.log(value)\n\n        input.setAttribute(attribute.name, value)\n      } else if (attributeValue) {\n        input.setAttribute(attribute.name, attributeValue)\n      }\n    }\n  }\n}\n\nwindow.customElements.define('mn-option', MnOption)\nwindow.MnOption = MnOption\n"]}